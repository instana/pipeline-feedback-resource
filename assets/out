#!/bin/bash

set -x
set -e
set -u
set -o pipefail

exec 3>&1
exec 1>&2

readonly base_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
readonly version="$(cat "${base_dir}/version" 2>/dev/null || echo 'unknown')"

echo "Creating a new Pipeline Feedback release"

readonly input_file=$(mktemp input.XXXXXX)

cat > "${input_file}" <&0

# Delete trailing `/`, as it can create issues when composing URLs later
readonly endpoint=$(jq -r .source.endpoint < "${input_file}" | sed "s,/$,,")
readonly api_token=$(jq -r .source.api_token < "${input_file}")
readonly release_name_file=$(jq -r .params.release_name_file < "${input_file}")
readonly start_file=$(jq -r .params.start_file < "${input_file}")
readonly scope_file=$(jq -r .params.scope_file < "${input_file}")

readonly URL_REGEXP='https?://[-A-Za-z0-9\.]+(:[0-9]+)?'

if [ -z "${endpoint}" ]; then
    echo "Invalid payload: missing 'endpoint'"
    exit 1
elif ! [[ "${endpoint}" =~ ${URL_REGEXP} ]]; then 
    echo "Invalid payload: the value '${endpoint}' for 'endpoint' is not valid; endpoint must match the followinf regex: ${URL_REGEXP}"
    exit 1
fi

if [ -z "${api_token}" ]; then
    echo "Invalid payload: missing 'api_token'"
    exit 1
fi

if [ "${release_name_file}" != null ]; then
    if [ -f "${release_name_file}" ]; then
        release_name="$(cat "${release_name_file}")"
    else
        echo "The release name file '${release_name_file}' does not exist"
        exit 1
    fi
else
    release_name="${BUILD_PIPELINE_NAME}/${BUILD_NAME} #${BUILD_ID}"
fi

if [ "${start_file}" != null ]; then
    if [ -f "${start_file}" ]; then
        start="$(cat "${start_file}")"

        if ! [[ "${start}" =~ [0-9]{13} ]]; then
            echo "The start timestamp '${start}' contained in the '${start_file}' file is invalid; it should be a UNIX timestamp in milliseconds (13 digits)"
            exit 1
        fi
    else
        echo "The start timestamp file '${start_file}' does not exist"
        exit 1
    fi
else
    start="$(date +%s)000"
fi

if [ "${scope_file}" != null ]; then
    if [ -f "${scope_file}" ]; then
        if ! JSON_TYPE=$(jq -r type < "${scope_file}"); then
            echo "The content of the '${scope_file}' scope file is not valid JSON:"
            echo "${JSON_TYPE}"
            exit 1
        fi

        if [ "${JSON_TYPE}" != 'object' ]; then
            echo "Wrong JSON type contained in the '${scope_file}' scope file; expected 'object', found '${JSON_TYPE}'"
            exit 1
        fi

        applications=$(jq -r .applications < "${scope_file}")
        services=$(jq -r .services < "${scope_file}")
    else
        echo "The scope file '${scope_file}' does not exist"
        exit 1
    fi
fi

echo "Using the API endpoint: ${endpoint}/api/releases"

if ! release=$(curl --silent --show-error --fail -X POST --header 'Content-Type: application/json' --user-agent "instana/pipeline-feedback-resource/${version}" --header "Authorization: apiToken ${api_token}" "${endpoint}/api/releases" -d "{
    \"name\": \"${release_name}\",
    \"start\": ${start},
    \"applications\": ${applications:-null},
    \"services\": ${services:-null}
}"); then
    echo 'Cannot create the release'
    exit 1
fi

readonly release_id=$(echo "${release}" | jq -r '.id')
readonly release_name=$(echo "${release}" | jq -r '.name')
readonly release_start=$(echo "${release}" | jq -r '.start')
readonly release_lastUpdated=$(echo "${release}" | jq -r '.lastUpdated')

echo "Created release '${release_name}' with ID '${release_id}'"

jq -n "{
    \"version\": {
        \"release\": \"${release_id}\"
    },
    \"metadata\": [
        {
            \"name\": \"name\",
            \"value\": \"${release_name}\"
        },
        {
            \"name\": \"start\",
            \"value\": \"${release_start}\"
        },
        {
            \"name\": \"lastUpdated\",
            \"value\": \"${release_lastUpdated}\"
        }
    ]
}" >&3
