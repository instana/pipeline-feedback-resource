#!/bin/bash

set -x
set -e
set -u
set -o pipefail

exec 3>&1
exec 1>&2

readonly base_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
readonly version="$(cat "${base_dir}/version" 2>/dev/null || echo 'unknown')"

echo "Retrieving latest Pipeline Feedback release"

readonly destination=$1

if [ -z "${destination}" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

mkdir -p "${destination}"

readonly input_file=$(mktemp input.XXXXXX)

cat > "${input_file}" <&0

# Delete trailing `/`, as it can create issues when composing URLs later
readonly endpoint=$(jq -r .source.endpoint < "${input_file}" | sed "s,/$,,")
readonly api_token=$(jq -r .source.api_token < "${input_file}")

readonly release_id=$(jq -r .version.release < "${input_file}")

readonly URL_REGEXP='https?://[-A-Za-z0-9\.]+(:[0-9]+)?'

if [ -z "${endpoint}" ]; then
  echo "Invalid payload: missing 'endpoint'"
  exit 1
elif ! [[ "${endpoint}" =~ ${URL_REGEXP} ]]; then 
  echo "Invalid payload: the value '${endpoint}' for 'endpoint' is not valid; endpoint must match the followinf regex: ${URL_REGEXP}"
  exit 1
fi

if [ -z "${api_token}" ]; then
  echo "Invalid payload: missing 'api_token'"
  exit 1
fi

if [ "${release_id}" = 'null' ]; then
  echo "Invalid payload: missing 'release'"
  exit 1
fi

echo "Using the API endpoint: ${endpoint}/api/releases"

echo -n "Retrieving release '${release_id}' ... "

if ! release=$(curl --silent --show-error --fail --user-agent "instana/pipeline-feedback-resource/v${version}" --header "Authorization: apiToken ${api_token}" "${endpoint}/api/releases/${release_id}"); then
  exit 1
fi

echo 'OK'
echo "Release '${release_id}':"
echo "${release}" | jq '.'

readonly release_name=$(echo "${release}" | jq -r '.name')
readonly release_start=$(echo "${release}" | jq -r '.start')
readonly release_lastUpdated=$(echo "${release}" | jq -r '.lastUpdated')

echo "${release_id}" > "${destination}/id"
echo "${release_name}" > "${destination}/name"
echo "${release_start}" > "${destination}/start"
echo "${release_lastUpdated}" > "${destination}/lastUpdated"

jq -n "{
  \"version\": {
    \"release\": \"${release_id}\"
  },
  \"metadata\": [
    {
      \"name\": \"name\",
      \"value\": \"${release_name}\"
    },
    {
      \"name\": \"start\",
      \"value\": \"${release_start}\"
    },
    {
      \"name\": \"lastUpdated\",
      \"value\": \"${release_lastUpdated}\"
    }
  ]
}" >&3
